{"version":3,"sources":["components/Timer/Timer.module.css","components/SettingsModal/Settings.module.css","components/SettingsBtn/SettingsBtn.module.css","images/settings.svg","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/Timer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","alt","src","Settings","title","active","onChange","backdrop","modal","content","Timer","useState","pomodoroInterval","setPomodoroInterval","shortBrake","setShortBrake","longBreak","setLongBreak","pomodoros","setPomodoros","Audio","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","temporary","setTemporary","useEffect","setTimeout","play","interval","flag","pomodoroCount","minutes","floor","seconds","onModal","total","getProgress","test","reset","console","log","value","e","target","closeSettings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4981b912.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Timer_btn__Iid4-\",\"reset\":\"Timer_reset__qowzy\",\"closeSettings\":\"Timer_closeSettings__38dNn\",\"test\":\"Timer_test__2gzBr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__2cF1P\",\"modal\":\"Settings_modal__3xZlg\",\"title\":\"Settings_title__1ItZZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__2UkWB\"};","module.exports = __webpack_public_path__ + \"static/media/settings.691d4f01.svg\";","import React from 'react';\r\nimport './TimerDisplay.css';\r\n\r\nconst TimeDisplay = (props) => {\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (props.progress / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"TimeDisplay\">\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n                <circle\r\n                    stroke=\"#ddd\"\r\n                    fill=\"#fff\"\r\n                    strokeWidth={stroke}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n                <circle\r\n                    stroke=\"#D9534F\"\r\n                    fill=\"transparent\"\r\n                    strokeWidth={stroke}\r\n                    strokeDasharray={circumference + ' ' + circumference}\r\n                    style={{ strokeDashoffset }}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n            </svg>\r\n            <div>\r\n                {props.children}\r\n                <p>Pomodoro Technique</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport css from './SettingsBtn.module.css';\r\nimport Settings from '../../images/settings.svg';\r\n\r\nconst SettingsBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <img alt=\"setting\" src={Settings} />\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SettingsBtn;","import React from 'react';\r\nimport css from './Settings.module.css';\r\n\r\nfunction Settings({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TimerDisplay from '../TimerDisplay';\r\nimport SettingsBtn from '../SettingsBtn';\r\nimport Settings from '../SettingsModal';\r\nimport css from './Timer.module.css';\r\n\r\nfunction Timer() {\r\n  // Here are time value hooks\r\n  const [pomodoroInterval, setPomodoroInterval] = useState(25);\r\n  const [shortBrake, setShortBrake] = useState(5);\r\n  const [longBreak, setLongBreak] = useState(10);\r\n  const [pomodoros, setPomodoros] = useState(4);\r\n\r\n  // Hooks for sounds\r\n  const [bell] = useState(new Audio('bell.flac'));\r\n\r\n  // Other hooks\r\n  const [time, setTime] = useState(pomodoroInterval * 60);\r\n  const [pomodoro, setPomodoro] = useState(1);\r\n  const [restFlag, setRestFlag] = useState(false);\r\n  const [buttonText, setButtonText] = useState(\"Pause\");\r\n  const [startStatus, setStartStatus] = useState(false);\r\n  const [settings, setSettings] = useState(false);\r\n\r\n  // Here is a temporary value for progress bar\r\n  const [temporary, setTemporary] = useState(pomodoroInterval)\r\n  // const [lol, setLol] = useState()\r\n\r\n  useEffect(() => {\r\n    if (startStatus) {\r\n      if (buttonText === 'Pause') {\r\n        if (time !== 0) {\r\n          setTimeout(() => {\r\n            setTime(time - 1);\r\n          }, 1000);\r\n        } else {\r\n          bell.play()\r\n          pomodoroCount()\r\n        }\r\n      }\r\n    }\r\n  },);\r\n\r\n  const start = () => {\r\n    console.log('test');\r\n    setStartStatus(true);\r\n  }\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time - minutes * 60;\r\n\r\n  function pomodoroCount() {\r\n    let pomodoroCount = pomodoro\r\n    let interval\r\n    let flag\r\n    if (pomodoro < pomodoros && !restFlag) {\r\n      interval = shortBrake\r\n      flag = true\r\n      setTemporary(shortBrake)\r\n    } else if (pomodoro < pomodoros && restFlag) {\r\n      pomodoroCount = pomodoro + 1\r\n      interval = pomodoroInterval\r\n      flag = false\r\n      setTemporary(pomodoroInterval)\r\n    } else if (pomodoro >= pomodoros) {\r\n      pomodoroCount = 1\r\n      interval = longBreak\r\n      flag = true\r\n      setTemporary(longBreak)\r\n    }\r\n    setPomodoro(pomodoroCount)\r\n    setTime(interval * 60)\r\n    setRestFlag(flag)\r\n  }\r\n\r\n  function pauseAndResume() {\r\n    let newText\r\n    if (buttonText === 'Pause') {\r\n      newText = 'Continue'\r\n    } else {\r\n      newText = 'Pause'\r\n    }\r\n    setButtonText(newText)\r\n  }\r\n\r\n  // Func for progress bar\r\n  const getProgress = () => {\r\n    const current = time;\r\n    const total = temporary * 60;\r\n    return ((total - current) / total) * 100;\r\n  };\r\n\r\n  const onModal = () => {\r\n    return setSettings(true);\r\n  }\r\n\r\n  const reset = () => {\r\n    setStartStatus(false)\r\n    setRestFlag(false)\r\n    // setPomodoroInterval(lol)\r\n    setTime(pomodoroInterval * 60)\r\n    setButtonText('Pause')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <SettingsBtn onclick={onModal} />\r\n\r\n      <TimerDisplay time={pomodoroInterval} progress={getProgress()}>\r\n        <h2 className={css.test}>{minutes < 10 ? `0${minutes}` : minutes} :  {seconds < 10 ? `0${seconds}` : seconds}</h2>\r\n      </TimerDisplay>\r\n\r\n      {\r\n        startStatus\r\n          ? <div>\r\n            <button className={css.btn} onClick={pauseAndResume} >{buttonText}</button>\r\n            <button className={css.reset} onClick={reset}>Reset</button>\r\n          </div>\r\n          : <button className={css.btn} onClick={start}>Start</button>\r\n      }\r\n\r\n      <Settings active={settings} onChange={onModal}>\r\n        <h3>Settings</h3>\r\n        <div>Pomodoro</div>\r\n        <input value={pomodoroInterval}\r\n          onChange={(e) => {\r\n            setPomodoroInterval(e.target.value)\r\n            setTime(e.target.value * 60)\r\n            setTemporary(e.target.value)\r\n            // setLol(e.target.value)\r\n          }} />\r\n\r\n        <div>Short Break</div>\r\n        <input value={shortBrake}\r\n          onChange={(e) => setShortBrake(e.target.value)} />\r\n\r\n        <div>Long Break</div>\r\n        <input value={longBreak}\r\n          onChange={(e) => setLongBreak(e.target.value)} />\r\n\r\n        <div>Pomodoro Count</div>\r\n        <input value={pomodoros}\r\n          onChange={(e) => setPomodoros(e.target.value)} /><br />\r\n\r\n        <button className={css.closeSettings}\r\n          onClick={() => setSettings(false)}>All ok</button>\r\n      </Settings>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from './components/Timer/index'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n       <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}