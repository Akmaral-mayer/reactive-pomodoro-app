{"version":3,"sources":["components/Timer/Timer.module.css","components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","components/SettingsBtn/SettingsBtn.module.css","images/settings.svg","audio/bell.flac","components/InfoBtn/InfoBtn.module.css","images/info.svg","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","components/Timer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","alt","src","Settings","title","active","onChange","backdrop","modal","content","InfoBtn","Info","Timer","useState","pomodoroInterval","setPomodoroInterval","shortBrake","setShortBrake","longBreak","setLongBreak","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","useEffect","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","allowEnterKey","confirmButtonColor","minutes","floor","seconds","onModal","onInfo","total","getProgress","test","reset","console","log","value","e","target","type","name","checked","id","closeSettings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b36c23e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Timer_btn__Iid4-\",\"reset\":\"Timer_reset__qowzy\",\"closeSettings\":\"Timer_closeSettings__38dNn\",\"test\":\"Timer_test__2gzBr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__2cF1P\",\"modal\":\"Settings_modal__3xZlg\",\"title\":\"Settings_title__1ItZZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__37FQl\",\"modal\":\"Info_modal__3N4Kn\",\"title\":\"Info_title__1bAap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__2UkWB\"};","module.exports = __webpack_public_path__ + \"static/media/settings.691d4f01.svg\";","module.exports = __webpack_public_path__ + \"static/media/bell.525320df.flac\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__mEgqr\"};","module.exports = __webpack_public_path__ + \"static/media/info.e21717cc.svg\";","import React from 'react';\r\nimport './TimerDisplay.css';\r\n\r\nconst TimeDisplay = (props) => {\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (props.progress / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"TimeDisplay\">\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n                <circle\r\n                    stroke=\"#ddd\"\r\n                    fill=\"#fff\"\r\n                    strokeWidth={stroke}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n                <circle\r\n                    stroke=\"#D9534F\"\r\n                    fill=\"transparent\"\r\n                    strokeWidth={stroke}\r\n                    strokeDasharray={circumference + ' ' + circumference}\r\n                    style={{ strokeDashoffset }}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n            </svg>\r\n            <div>\r\n                {props.children}\r\n                <p>Pomodoro Technique</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport css from './SettingsBtn.module.css';\r\nimport Settings from '../../images/settings.svg';\r\n\r\nconst SettingsBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <img alt=\"setting\" src={Settings} />\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SettingsBtn;","import React from 'react';\r\nimport css from './Settings.module.css';\r\n\r\nfunction Settings({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport css from './InfoBtn.module.css';\r\nimport Info from '../../images/info.svg';\r\n\r\nconst InfoBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <img alt=\"setting\" src={Info} />\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default InfoBtn;","import React from 'react';\r\nimport css from './Info.module.css';\r\n\r\nfunction Info({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TimerDisplay from '../TimerDisplay';\r\nimport SettingsBtn from '../SettingsBtn';\r\nimport Settings from '../SettingsModal';\r\nimport css from './Timer.module.css';\r\nimport bellSound from '../../audio/bell.flac';\r\nimport Swal from 'sweetalert2';\r\nimport InfoBtn from '../InfoBtn';\r\nimport Info from '../InfoModal';\r\n\r\nfunction Timer() {\r\n  // Here are time value hooks \r\n  const [pomodoroInterval, setPomodoroInterval] = useState(25);\r\n  const [shortBrake, setShortBrake] = useState(5);\r\n  const [longBreak, setLongBreak] = useState(10);\r\n  const [pomodoros, setPomodoros] = useState(4);\r\n  const [autoPlay, setAutoPlay] = useState(true);\r\n\r\n  // Hooks for sounds\r\n  const [bell] = useState(new Audio(bellSound));\r\n\r\n  // Other hooks\r\n  const [time, setTime] = useState(pomodoroInterval * 60);\r\n  const [pomodoro, setPomodoro] = useState(1);\r\n  const [restFlag, setRestFlag] = useState(false);\r\n  const [buttonText, setButtonText] = useState(\"Pause\");\r\n  const [startStatus, setStartStatus] = useState(false);\r\n\r\n  // Hooks for Modals\r\n  const [settings, setSettings] = useState(false);\r\n  const [info, setInfo] = useState(false);\r\n\r\n  // Here is a temporary value for progress bar\r\n  const [temporary, setTemporary] = useState(pomodoroInterval)\r\n\r\n  useEffect(() => {\r\n    if (startStatus) {\r\n      if (buttonText === 'Pause') {\r\n        if (time !== 0) {\r\n          setTimeout(() => {\r\n            setTime(time - 1);\r\n          }, 1000);\r\n        } else {\r\n          bell.play()\r\n          pomodoroCount()\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const start = () => {\r\n    console.log('test');\r\n    setStartStatus(true);\r\n  }\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time - minutes * 60;\r\n\r\n  function pomodoroCount() {\r\n    let pomodoroCount = pomodoro\r\n    let interval\r\n    let flag\r\n    if (pomodoro < pomodoros && !restFlag) {\r\n      interval = shortBrake\r\n      flag = true\r\n      setTemporary(shortBrake)\r\n\r\n      {\r\n        autoPlay === true &&\r\n          Swal.fire({\r\n            title: \"Time to have a rest\",\r\n            allowOutsideClick: false,\r\n            onOpen: () => { setButtonText(\"Continue\") },\r\n            onClose: () => { setButtonText(\"Pause\") },\r\n            allowEnterKey: true,\r\n            confirmButtonColor: \"red\"\r\n          })\r\n      }\r\n\r\n    } else if (pomodoro < pomodoros && restFlag) {\r\n      pomodoroCount = pomodoro + 1\r\n      interval = pomodoroInterval\r\n      flag = false\r\n      setTemporary(pomodoroInterval)\r\n\r\n      {\r\n        autoPlay === true &&\r\n          Swal.fire({\r\n            title: \"Time to work\",\r\n            allowOutsideClick: false,\r\n            onOpen: () => { setButtonText(\"Continue\") },\r\n            onClose: () => { setButtonText(\"Pause\") },\r\n            allowEnterKey: true,\r\n            confirmButtonColor: \"red\"\r\n          })\r\n      }\r\n\r\n\r\n    } else if (pomodoro >= pomodoros) {\r\n      pomodoroCount = 1\r\n      interval = longBreak\r\n      flag = true\r\n      setTemporary(longBreak)\r\n\r\n\r\n      {\r\n        autoPlay === true &&\r\n          Swal.fire({\r\n            title: \"Time to have the longest break\",\r\n            allowOutsideClick: false,\r\n            onOpen: () => { setButtonText(\"Continue\") },\r\n            onClose: () => { setButtonText(\"Pause\") },\r\n            allowEnterKey: true,\r\n            confirmButtonColor: \"red\"\r\n          })\r\n      }\r\n\r\n    }\r\n    setPomodoro(pomodoroCount)\r\n    setTime(interval * 60)\r\n    setRestFlag(flag)\r\n  }\r\n\r\n  function pauseAndResume() {\r\n    let newText\r\n    if (buttonText === 'Pause') {\r\n      newText = 'Continue'\r\n    } else {\r\n      newText = 'Pause'\r\n    }\r\n    setButtonText(newText)\r\n  }\r\n\r\n  // Func for progress bar\r\n  const getProgress = () => {\r\n    const current = time;\r\n    const total = temporary * 60;\r\n    return ((total - current) / total) * 100;\r\n  };\r\n\r\n  const onModal = () => {\r\n    return setSettings(true);\r\n  }\r\n\r\n  const onInfo = () => {\r\n    return setInfo(true);\r\n  }\r\n\r\n  const onCheckBox = () => {\r\n    return setAutoPlay(!autoPlay)\r\n  }\r\n\r\n  const reset = () => {\r\n    if (buttonText === \"Continue\") {\r\n      setStartStatus(false)\r\n      setRestFlag(false)\r\n      setTime((temporary) * 60)\r\n      setButtonText('Pause')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InfoBtn onclick={onInfo} />\r\n      <SettingsBtn onclick={onModal} />\r\n\r\n      <TimerDisplay time={pomodoroInterval} progress={getProgress()}>\r\n        <h2 className={css.test}>{minutes < 10 ? `0${minutes}` : minutes} :  {seconds < 10 ? `0${seconds}` : seconds}</h2>\r\n      </TimerDisplay>\r\n\r\n      {\r\n        startStatus\r\n          ? <div>\r\n            <button className={css.btn} onClick={pauseAndResume} >{buttonText}</button>\r\n            <button className={css.reset} title=\"Click <Pause> to reset\" onClick={reset}>Reset</button>\r\n          </div>\r\n          : <button className={css.btn} onClick={start}>Start</button>\r\n      }\r\n\r\n      <Settings active={settings} onChange={onModal}>\r\n        <h3>Settings</h3>\r\n        <div>Pomodoro</div>\r\n        <input value={pomodoroInterval}\r\n          onChange={(e) => {\r\n            setPomodoroInterval(e.target.value)\r\n            setTime(e.target.value * 60)\r\n            setTemporary(e.target.value)\r\n          }} />\r\n\r\n        <div>Short Break</div>\r\n        <input value={shortBrake}\r\n          onChange={(e) => setShortBrake(e.target.value)} />\r\n\r\n        <div>Long Break</div>\r\n        <input value={longBreak}\r\n          onChange={(e) => setLongBreak(e.target.value)} />\r\n\r\n        <div>Pomodoro Count</div>\r\n        <input value={pomodoros}\r\n          onChange={(e) => setPomodoros(e.target.value)} />\r\n\r\n        <div>Auto Play without push notifications</div>\r\n        <input type=\"checkbox\" name=\"\" onChange={onCheckBox} checked={autoPlay} id=\"\" /><br />\r\n\r\n        <button className={css.closeSettings}\r\n          onClick={() => setSettings(false)}>All ok</button>\r\n      </Settings>\r\n\r\n      <Info active={info} onChange={onInfo}>\r\n        <h2>About Pomodoro Technique</h2>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit.\r\n         Nihil labore sit quas nam repellat perspiciatis autem, distinctio\r\n         suscipit ex, quae in fuga?\r\n        <h2>Use Experience</h2>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit.\r\n        Reiciendis aliquid cupiditate fugiat velit? Quam explicabo consequuntur,\r\n        odio non qui recusandae vitae dolore nam odit eius maxime maiores voluptate quaerat provident?\r\n        <br />\r\n        <button className={css.closeSettings}\r\n          onClick={() => setInfo(false)}>Close</button>\r\n      </Info>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport './App.css';\r\nimport Timer from './components/Timer/index'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n       <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}